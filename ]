#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#define SIZE 101
#define NUMBER 0

int stack[SIZE];
int sp = 0;

int buf[SIZE];
int bp = 0;

double pop();
void push(double x);
int getop(char s[]);
void print_top();
void duplicate_stack();
void swap_top_two(int st[]);

int getch();
void ungetch(int c);

int main() {
  char s[SIZE];
  double op1, op2;
  int type;
  while ((type = getop(s)) != EOF)
    switch (type) {
    case NUMBER:
      push(atof(s));
      break;
    case '+':
      push(pop() + pop());
      break;
    case '*':
      push(pop() * pop());
      break;
    case '-':
      op2 = pop();
      push(pop() - op2);
      break;
    case '/':
      op2 = pop();
      if (op2 != 0.0)
        push(pop() / op2);
      else
        printf("error: zero divisor\n");
    case '%':
      op2 = pop();
      op1 = pop();
      if (op2 != 0.0)
        push(op1 - op2 * (int)(op1 / op2));
      else
        printf("zero division error\n");
      break;
    case 'p':
      print_top();
    case 'd':
      duplicate_stack();
    case '\n':
      printf("\t%.8g\n", pop());
      break;
    default:
      printf("error: unknown command %s\n", s);
      break;
    }
  return 0;
}

double pop() {
  if (sp > 0)
    return stack[--sp];
  printf("error: stack empty\n");
  return 0.0;
}

void push(double x) {
  if (sp < SIZE)
    stack[sp++] = x;
  else
    printf("error: stack full, can't push %g\n", x);
}

int getch() {
  if (bp > 0)
    return buf[--bp];
  else
    return getchar();
}

void ungetch(int c) {
  if (bp < SIZE)
    buf[bp++] = c;
  else
    printf("ungetch: too many characters\n");
}

void print_top() {
  if (sp > 0)
    printf("%d", stack[sp]);
}

void duplicate_stack() { stack[sp + 1] = stack[sp++]; }

void swap(int *a, int *b) {
  int aux = *a;
  *a = *b;
  *b = aux;
}

void swap_top_two(int st[]) {
  if (sp >= 1)
    swap(&stack[sp - 1], &stack[sp]);
}

int getop(char s[]) {
  int i, c;
  while ((s[0] = c = getch()) == ' ' || c == '\t')
    ;
  s[1] = '\0';
  if (!isdigit(c) && c != '.' && c != '-')
    return c;
  i = 0;
  if (c == '-') {
    if (isdigit(c = getch()))
      s[++i] = c;
    else {
      if (c != EOF) {
        ungetch(c);
      }
      return '-';
    }
  }
  if (isdigit(c))
    while (isdigit(s[++i] = c = getch()))
      ;
  if (c == '.')
    while (isdigit(s[++i] = c = getch()))
      ;
  s[i] = '\0';
  if (c != EOF)
    ungetch(c);
  return NUMBER;
}
